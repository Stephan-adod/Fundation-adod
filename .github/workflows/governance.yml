name: governance

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'tickets/**'
      - 'scripts/**'
      - '.github/workflows/**'

concurrency:
  group: governance-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write

env:
  SHADOW_MODE: true
  MAX_AUTOFIX_COMMITS: 1
  METRICS_FILE: artefacts/reports/ci-metrics.jsonl

jobs:
  run-checks:
    runs-on: ubuntu-latest
    env:
      RATE_PER_MIN: 0.008
      PR_TITLE: ${{ github.event.pull_request.title }}
      GITHUB_HEAD_REF: ${{ github.head_ref }}
    steps:
      - name: Start timer
        run: echo "START_TS=$(date +%s)" >> $GITHUB_ENV
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          persist-credentials: true
      - uses: actions/setup-node@v4
        with: { node-version: 20 }

      - name: Prettier (check)
        id: prettier
        continue-on-error: true
        run: npx --yes prettier --check .

      - name: Count previous bot commits
        id: count
        shell: bash
        run: |
          COUNT=$( {
            git log --pretty='%an\t%s' 2>/dev/null || true
          } | awk -F'\t' '$1 == "github-actions[bot]" && $2 == "chore(prettier): auto-format via CI" {c++} END {print c+0}')
          echo "n=${COUNT:-0}" >> "$GITHUB_OUTPUT"

      - name: Prettier (write & commit)
        if: |
          steps.prettier.outcome == 'failure' &&
          steps.count.outputs.n < env.MAX_AUTOFIX_COMMITS &&
          github.event.pull_request.head.repo.full_name == github.repository
        run: |
          npx --yes prettier --write .
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git commit -am "chore(prettier): auto-format via CI" || echo "nothing to commit"
          git push origin HEAD:${{ github.head_ref }}

      - name: Metrics start (prettier-recheck)
        id: mstart_prettier
        run: echo "started=$(date +%s%3N)" >> $GITHUB_OUTPUT
      - name: Prettier (re-check)
        id: prettier_recheck
        continue-on-error: true
        run: npx --yes prettier --check .
      - name: Metrics append (prettier-recheck)
        if: ${{ always() && github.event.pull_request.head.repo.full_name == github.repository }}
        run: |
          set -e
          mkdir -p artefacts/reports
          END=$(date +%s%3N)
          START=${{ steps.mstart_prettier.outputs.started }}
          DUR_MS=$((END-START))
          TS=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          COST=$(awk "BEGIN {printf \"%.6f\", $DUR_MS/1000 * 0.000001}")
          printf '{\"ts\":\"%s\",\"wf\":\"governance\",\"job\":\"prettier-recheck\",\"duration_ms\":%s,\"cost_usd\":%s,\"sha\":\"%s\"}\n' "$TS" "$DUR_MS" "$COST" "$SHA" >> "$METRICS_FILE"
          node scripts/commit-if-changed.mjs "$METRICS_FILE"
      - name: Loop summary (post)
        if: ${{ always() && github.event.pull_request.head.repo.full_name == github.repository }}
        run: |
          node tools/loop-log.mjs --write-md-summary \
            --outcome "${{ job.status }}" \
            --prettier-fix "${{ steps.prettier.outcome == 'failure' }}"

  run-utf8:
    runs-on: ubuntu-latest
    needs: run-checks
    env:
      PR_TITLE: ${{ github.event.pull_request.title }}
      GITHUB_HEAD_REF: ${{ github.head_ref }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20 }
      - name: Metrics start (utf8)
        id: mstart_utf8
        run: echo "started=$(date +%s%3N)" >> $GITHUB_OUTPUT
      - name: UTF-8 / BOM / spacing
        continue-on-error: ${{ env.SHADOW_MODE == 'true' }}
        run: node scripts/check-utf8.mjs --root .
      - name: Metrics append (utf8)
        if: ${{ always() && github.event.pull_request.head.repo.full_name == github.repository }}
        run: |
          set -e
          mkdir -p artefacts/reports
          END=$(date +%s%3N)
          START=${{ steps.mstart_utf8.outputs.started }}
          DUR_MS=$((END-START))
          TS=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          COST=$(awk "BEGIN {printf \"%.6f\", $DUR_MS/1000 * 0.000001}")
          printf '{\"ts\":\"%s\",\"wf\":\"governance\",\"job\":\"utf8\",\"duration_ms\":%s,\"cost_usd\":%s,\"sha\":\"%s\"}\n' "$TS" "$DUR_MS" "$COST" "$SHA" >> "$METRICS_FILE"
          node scripts/commit-if-changed.mjs "$METRICS_FILE"

  validate-all:
    runs-on: ubuntu-latest
    needs: run-utf8
    env:
      PR_TITLE: ${{ github.event.pull_request.title }}
      GITHUB_HEAD_REF: ${{ github.head_ref }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20 }
      - name: Metrics start (ticket-validator)
        id: mstart_validator
        run: echo "started=$(date +%s%3N)" >> $GITHUB_OUTPUT
      - name: Validate all tickets (non-strict)
        continue-on-error: true
        run: node scripts/validate-ticket.mjs
      - name: Metrics append (ticket-validator)
        if: ${{ always() && github.event.pull_request.head.repo.full_name == github.repository }}
        run: |
          set -e
          mkdir -p artefacts/reports
          END=$(date +%s%3N)
          START=${{ steps.mstart_validator.outputs.started }}
          DUR_MS=$((END-START))
          TS=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          COST=$(awk "BEGIN {printf \"%.6f\", $DUR_MS/1000 * 0.000001}")
          printf '{\"ts\":\"%s\",\"wf\":\"governance\",\"job\":\"ticket-validator\",\"duration_ms\":%s,\"cost_usd\":%s,\"sha\":\"%s\"}\n' "$TS" "$DUR_MS" "$COST" "$SHA" >> "$METRICS_FILE"
          node scripts/commit-if-changed.mjs "$METRICS_FILE"

  collect-changed:
    runs-on: ubuntu-latest
    needs: validate-all
    env:
      PR_TITLE: ${{ github.event.pull_request.title }}
      GITHUB_HEAD_REF: ${{ github.head_ref }}
    outputs:
      tickets: ${{ steps.set.outputs.tickets }}
    steps:
      - uses: actions/checkout@v4
      - name: Collect changed tickets
        id: set
        shell: bash
        run: |
          BASE=${{ github.base_ref }}
          CHANGED=$(git diff --name-only origin/$BASE...${{ github.sha }} | grep -E '^tickets/AT-[0-9]+\.md$' || true)
          echo "tickets=$(printf '%s\n' "$CHANGED" | jq -R -s 'split("\n")|map(select(length>0))')" >> "$GITHUB_OUTPUT"

  validate-changed:
    runs-on: ubuntu-latest
    needs: collect-changed
    if: ${{ fromJson(needs.collect-changed.outputs.tickets).length > 0 }}
    env:
      PR_TITLE: ${{ github.event.pull_request.title }}
      GITHUB_HEAD_REF: ${{ github.head_ref }}
    strategy:
      matrix:
        file: ${{ fromJson(needs.collect-changed.outputs.tickets) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20 }
      - name: Validate changed ticket (strict)
        run: node scripts/validate-ticket.mjs --strict --file "${{ matrix.file }}"

  summary:
    runs-on: ubuntu-latest
    needs: [run-checks, run-utf8, validate-all, validate-changed]
    if: always()
    env:
      PR_TITLE: ${{ github.event.pull_request.title }}
      GITHUB_HEAD_REF: ${{ github.head_ref }}
    steps:
      - name: Start timer
        run: echo "START_TS=$(date +%s)" >> $GITHUB_ENV
      - name: Metrics start (summary)
        id: mstart_summary
        run: echo "started=$(date +%s%3N)" >> $GITHUB_OUTPUT
      - name: Governance Summary
        run: |
          echo "### Governance Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Prettier: **${{ needs.run-checks.result }}**" >> $GITHUB_STEP_SUMMARY
          echo "- UTF-8: **${{ needs.run-utf8.result }}**" >> $GITHUB_STEP_SUMMARY
          echo "- Tickets (non-strict): **${{ needs.validate-all.result }}**" >> $GITHUB_STEP_SUMMARY
          echo "- Tickets (strict, changed): **${{ needs.validate-changed.result }}**" >> $GITHUB_STEP_SUMMARY
          echo "- Shadow Mode: **${{ env.SHADOW_MODE }}** (Warnungen statt Fail für zusätzliche Checks)" >> $GITHUB_STEP_SUMMARY
      - name: Metrics append (summary)
        if: ${{ always() && github.event.pull_request.head.repo.full_name == github.repository }}
        run: |
          set -e
          mkdir -p artefacts/reports
          END=$(date +%s%3N)
          START=${{ steps.mstart_summary.outputs.started }}
          DUR_MS=$((END-START))
          TS=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          COST=$(awk "BEGIN {printf \"%.6f\", $DUR_MS/1000 * 0.000001}")
          printf '{\"ts\":\"%s\",\"wf\":\"governance\",\"job\":\"summary\",\"duration_ms\":%s,\"cost_usd\":%s,\"sha\":\"%s\"}\n' "$TS" "$DUR_MS" "$COST" "$SHA" >> "$METRICS_FILE"
          node scripts/commit-if-changed.mjs "$METRICS_FILE"
      - name: Metrics (write)
        if: always()
        env:
          RATE_PER_MIN: ${{ env.RATE_PER_MIN || 0.008 }}
        run: |
          END_TS=$(date +%s)
          DUR=$(( END_TS - ${START_TS:-END_TS} ))
          node scripts/ci-metrics.mjs governance-summary ${{ job.status }} --duration $DUR --rate ${RATE_PER_MIN:-0}
      - name: Loop Log (non-blocking)
        if: ${{ always() && github.event.pull_request.head.repo.full_name == github.repository }}
        run: node tools/loop-log.mjs --ticket-from-branch --summary "$GITHUB_STEP_SUMMARY"
      - name: Persist metrics/logs if changed
        if: always()
        run: node scripts/commit-if-changed.mjs
        continue-on-error: true
